library(forecast)
stat <- arima.sim(model=list(order=c(0,0,0)), n=50)
ts.plot(stat)
nonstat <- arima.sim(model=list(order=c(0,3,0)),n=50)
ts.plot(nonstat)
wn <- arima.sim(model=list(order=c(0,0,0)), n = 50)
ts.plot(wn) # Mean=0 and SD=1 by default
wn
wn <- arima.sim(model = list(order=c(0,0,0)), n = 50, mean=23, sd=10)
ts.plot(wn)
wn
mean(wn)
sd(wn)
ts.plot(wn)
abline(h=23, lty=3, col="red")
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw <- arima.sim(model=list(order=c(0,1,0)), n=50)
ts.plot(rw)
rw_diff <- diff(rw)
ts.plot(rw_diff)
abline(h=0, lty=3, col="red")
mean(rw_diff)
sd(rw_diff)
rw_drift <- arima.sim(model = list(order = c(0, 1, 0)), n = 50, mean = 5)
ts.plot(rw_drift)
rw_drift_diff <- diff(rw_drift)
ts.plot(rw_drift_diff)
abline(h=5, lty=3, col="red")
mean(rw_drift_diff)
sd(rw_drift_diff)
JohnsonJohnson
plot(JohnsonJohnson)
air.fit <- auto.arima(AirPassengers)
air.fit
air.fit <- auto.arima(JohnsonJohnson)
air.fit
ma1 <- arima.sim(list(order=c(p=0,d=0,q=1),
ma=-0.85),n=200)  + 40
acf2(ma1)
library(astsa)
ma1 <- arima.sim(list(order=c(p=0,d=0,q=1),
ma=-0.85),n=200)  + 40
acf2(ma1)
ma1.fit <- sarima(ma1,p=0,d=0,q=1)
ma1.fit$ttable
ma1.fit <- sarima(ma1,p=0,d=0,q=1)
ma1.fit$ttable
ma1
ma1.fit <- sarima(ma1,p=0,d=0,q=1)
ma1.fit$ttable
ma1.fit
library(astsa)
ma1 <- arima.sim(list(order=c(p=0,d=0,q=1),
ma=-0.85),n=200)  + 40
acf2(ma1)
ma1
ma1.fit <- sarima(ma1,p=0,d=0,q=1)
ma1.fit$ttable
arma11 <- arima.sim(list(order=c(p=1,d=0,q=1),
ar=0.89,ma=-0.45), n=200)
acf2(arma11)
arma11.fit <- sarima(arma11,p=1,d=0,q=1)
arma11.fit$ttable
library(forecast)
mtcars
cor(mtcars)
x <- c(2.5,0.5,2.2,1.9,3.1,2.3,2,1,1.5,1.1)
y <- c(2.4,0.7,2.9,2.2,3,2.7,1.6,1.1,1.6,0.9)
d1 <- data.frame(x,y)
d1.scaled <- scale(d1, scale = F)
cvo <- cov(d1.scaled)
cvo
eg <- eigen(cvo)
eg
eg$values
eg$vectors
pca <- d1.scaled %*% eg$vectors
pca
prc<- prcomp(d1)
prc$x
d1
pcas <- c(pca[,1],pca[,2])
sc <- c(d1.scaled[,1],d1.scaled[,2])
plot(sc,pcas)
data(milk,package="flexclust")
prc <- prcomp(milk)
View(milk)
prc
View(milk)
prc$sdev
prc$rotation
prc$rotation %*% diag(prc$sdev^2) %*% t(prc$rotation)
cov(scale(milk,scale=F))
prc$center
prc$scale
prc$x
prc$rotation
prc$sdev
scale(milk,scale = F) %*% prc$rotation
pr.var <- prc$sdev^2
prc$x[,1]
sd(prc$x[,1])
sd(prc$x[,2])
prc$sdev
prc$sdev^2
pr.var <- prc$sdev^2
pr.var
pr.var
sum(pr.var)
pve <- pr.var / sum(pr.var)
pve
pve*100
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
par(mfrow=c(1,1))
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
prc$x
View(milk)
cumsum(pve)
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cummulative Proportion of Variance Explained",
type = "b")
prc <- prcomp(milk,scale. = T)
biplot(prc,cex=0.7,scale = 0)
prc <- prcomp(milk)
biplot(prc,cex=0.7,scale = 0)
prc$rotation
prc$rotation
biplot(prc,cex=0.7,scale = 0)
View(milk)
prc <- prcomp(milk,scale. = T)
biplot(prc,cex=0.7,scale = 0)
library(Quandl)
futures <- Quandl("CHRIS/CME_KI2", api_key="bWLHEtsyTq1i7s_PfQey")
View(futures)
futures <- Quandl("CHRIS/CME_KI2", api_key="bWLHEtsyTq1i7s_PfQey",type = "ts")
plot(futures)
futures <- Quandl("CHRIS/CME_KI2.6", api_key="bWLHEtsyTq1i7s_PfQey",type = "ts")
plot(futures)
futures
library(astsa)
# Simulating the MA model
x <- arima.sim(model = list(ma=0.9), n = 100)
y <- arima.sim(model = list(ma=-0.9), n = 100)
z <- arima.sim(model = list(ma=0.01), n = 100)
plot.ts(cbind(x, y, z), main="x(theta=0.9),y(theta=-0.9),z(theta=0)")
par(mfcol=c(3,1))
acf(x)
acf(y)
acf(z)
